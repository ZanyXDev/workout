#!/usr/bin/perl -w
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#


# todo: POD
# TODO: options for parameters (bike, user)
# TODO: one-line output for tabular lists of several workouts

# TODO: cumulate data from multiple files

use strict;
use DateTime;
use Getopt::Long;
use Workout;
use Workout::Constant qw/:all/;
use I18N::Langinfo qw(langinfo CODESET);

my $charset = langinfo(CODESET);
binmode STDIN, ":encoding($charset)";
binmode STDOUT, ":encoding($charset)";
binmode STDERR, ":encoding($charset)";


my $itype;
my $debug;
my $ftp;
my $dopwr;
my $domax;
my $domarks;
my $docalc,
my $recint;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"debug!"	=> \$debug,
	"ftp=i"		=> \$ftp,
	"help!"		=> \$wanthelp,
	"itype=s"	=> \$itype,
	"marker!"	=> \$domarks,
	"maxint!"	=> \$domax,
	"calc!"		=> \$docalc,
	"pwr!"		=> \$dopwr,
	"recint=f"	=> \$recint,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <fname>
calculate some fancy data from Workout data

Options:
--itype=<type>      input file type

--recint=<sec>      resample before calculatin
--ftp=<w>           threshold power (W)
--pwr               try to calculate missing power
--maxint            calculate per-interval max power

--marker            show per-marker info
--calc              show calculated summary instead of stored data

--debug             enable debuging output
--help              this cruft
EOF
	exit 0;
}

my $fname = shift;
if( ! $fname ){
	print STDERR "missing input file\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}

my $src = Workout::file_read( $fname, { 
	debug	=> $debug, 
	ftype	=> $itype, 
} );
my $iter = $src->iterate;

$iter = Workout::filter( 'Resample', $iter, {
	debug	=> $debug,
	recint	=> $recint,
}) if $recint;

$iter = my $pwr = Workout::filter( 'Pwr', $iter, { 
	debug	=> $debug,
}) if $dopwr;

$iter = my $info = Workout::filter( 'Info', $iter, {
	debug	=> $debug,
});

$iter = my $finfo = Workout::filter( 'FTP', $iter, {
	debug	=> $debug,
	ftp	=> $ftp||0,
}) if defined $ftp;

$iter = my $m20 = Workout::filter( 'Max', $iter, {
	debug	=> $debug,
	dur	=> 1200,
}) if defined $domax;

$iter = my $m60 = Workout::filter( 'Max', $iter, {
	debug	=> $debug,
	dur	=> 3600,
}) if defined $domax;

$iter->finish;

my $smeta = $src->meta;
my $meta = $info->meta( $docalc ? undef : $smeta );


if( $info->cntin == 0 ){
	print "file seems empty\n";
	exit;
}

my $sdate = DateTime->from_epoch( 
	epoch		=> $meta->{time_start},
	time_zone	=> 'local',
);
my $edate = DateTime->from_epoch(
	epoch		=> $meta->{time_end},
	time_zone	=> 'local',
);

my $fields = $info->fields_used;
my @fields = sort { $a cmp $b } grep { $fields->{$_} } keys %{$fields};

# TODO: zones/inzone

print 
"chunks:          ", $src->chunk_count, " (", 
	sprintf('%.2f',$meta->{dur_rec}/$src->chunk_count), "s/chunk recint=", 
	$src->recint||0, ")\n",
"used fields:     ", join(',', @fields ), "\n", 
"marker:          ", $src->mark_count, "\n",

"start time:      ", $sdate->datetime, " (", $meta->{time_start} ,")\n",
"end time:        ", $edate->datetime, " (", $meta->{time_end}, ")\n",

"duration:        ", fmtdur( $meta->{dur} ), " h (", int($meta->{dur}/60), "m)\n",
"creeping:        ", fmtdur( $meta->{dur_creep} ), " h (",
	int(($meta->{dur_creep}||0)/60), "m)\n",
"moving:          ", fmtdur( $meta->{dur_mov} ), " h (",
	int(($meta->{dur_mov}||0)/60), "m)\n",
"pedaling:        ", fmtdur( $meta->{dur_ncad} ), " h (",
	int(($meta->{dur_ncad}||0)/60), "m) (",
	sprintf('%.2f', ($meta->{cad_percent}||0) ), "%)\n",

"Temperature min: ", (int($meta->{temp_min}||0) || '?'), " °C\n",
"Temperature max: ", (int($meta->{temp_max}||0) || '?'), " °C\n",
"Temperature avg: ", (int($meta->{temp_avg}||0) || '?'), " °C\n",

"Heartrate min:   ", (int($meta->{hr_min}||0) || '?'), " 1/min\n",
"Heartrate avg:   ", (int($meta->{hr_avg}||0) || '?'), " 1/min\n",
"Heartrate max:   ", (int($meta->{hr_max}||0) || '?'), " 1/min at ",
	fmttime($meta->{hr_max_time}), "\n",

"Cadence avg:     ", (int($meta->{cad_navg}||0) || '?'), " 1/min\n",
"Cadence max:     ", (int($meta->{cad_max}||0) || '?'), " 1/min at ",
	fmttime($meta->{cad_max_time}), "\n",

"start elevation: ", (int($meta->{ele_start}||0) ||'?'), " m\n",
"min elevation:   ", (int($meta->{ele_min}||0) ||'?'), " m\n",
"max elevation:   ", (int($meta->{ele_max}||0) ||'?'), " m at ",
	fmttime($meta->{ele_max_time}), "\n",
"max slope:       ", sprintf( '%.1f', ($meta->{grad_max}||0)), " % at ",
	fmttime($meta->{grad_max_time}), "\n",
"total ascent:    ", (int($meta->{ascent}||0) ||'?'), " m\n",
"total descent:   ", (int($meta->{descent}||0) ||'?'), " m\n",

"total distance:  ", sprintf( '%.2f', ($meta->{dist}||0) / 1000), " km\n",

"max speed:       ", sprintf( '%.2f', ($meta->{spd_max}||0) * KMH ), " km/h at ",
	fmttime($meta->{spd_max_time}), "\n",
"avg speed:       ", sprintf( '%.2f', ($meta->{spd_avg}||0) * KMH ), " km/h\n",
"max accel:       ", sprintf( '%.2f', ($meta->{accel_max}||0) ), " m/s² at ",
	fmttime($meta->{accel_max_time}), "\n",

"total work:      ", sprintf( '%.2f', ($meta->{work}||0) / 1000 ), " kJ\n",
"avg Power:       ", sprintf( '%.2f', ($meta->{pwr_avg}||0) ), " W\n", # TODO
"max Power:       ", sprintf( '%.2f', ($meta->{pwr_max}||0) ), " W at ", # TODO
	fmttime($meta->{pwr_max_time}), "\n";

$m20 && print
"20m avg Power:   ", sprintf( '%.2f', ($m20->pwr||0) ), " W from ",
	fmttime($m20->stime), " to ",
	fmttime($m20->time), "\n";

$m60 && print
"60m avg Power:   ", sprintf( '%.2f', ($m60->pwr||0) ), " W from ",
	fmttime($m60->stime), " to ",
	fmttime($m60->time), "\n";

$finfo && print 
"Zavg Power:      ", sprintf( '%.2f', ($finfo->apwr||0) ), " W\n",
"norm. Power:     ", sprintf( '%.2f', ($finfo->npwr||0) ), " W (VI=",
	sprintf( '%.2f', ($finfo->vi||0) ), ")\n",
"TSS:             ", sprintf( '%.2f', ($finfo->tss||0) ), " (IF=",
	sprintf( '%.2f', ($finfo->if||0) ), ")\n";

print
"avg Torque:      ", sprintf( '%.2f', ($meta->{torque_avg}||0) ), " Nm\n", # TODO
"max Torque:      ", sprintf( '%.2f', ($meta->{torque_max}||0) ), " Nm at ", # TODO
	fmttime($meta->{torque_max_time}), "\n",
"metadata:\n";
foreach my $k ( sort { $a cmp $b } keys %$smeta ){
	defined $smeta->{$k} or next;
	ref $smeta->{$k} and next;
	printf " %-16s%s\n", $k.':', $smeta->{$k};
}


if( $domarks ){
	my $marks = $src->marks;
	foreach my $idx ( 0..$#$marks ){
		my $mark = $marks->[$idx];
		my $mi = $mark->info;
		next unless $mi->cntin;

		my $mm = $mark->meta;
		my $mim = $mi->meta( $docalc ? undef : $mm );


		my $sdate = DateTime->from_epoch( 
			epoch		=> $mim->{time_start},
			time_zone	=> 'local',
		);
		my $edate = DateTime->from_epoch(
			epoch		=> $mim->{time_end},
			time_zone	=> 'local',
		);

		print
"\nMarker ", $idx, ":\n",
"marker:          ", $mark->start, " - ", $mark->end, ": ",
	$mark->end - $mark->start, "s\n",
"idx:             ", $mi->src->ifirst, " - ", $mi->src->ilast, "\n",
"start time:      ", $sdate->datetime, " (", $mim->{time_start} ," @ ",
	$mim->{time_start} - $src->time_start ,")\n",
"end time:        ", $edate->datetime, " (", $mim->{time_end} ," @ ",
	$mim->{time_end} - $src->time_start ,")\n",

"duration:        ", fmtdur( $mim->{dur} ), " h (", int($mim->{dur}/60), "m, ",
		$mim->{dur}, "s)\n",

"Heartrate min:   ", (int($mim->{hr_min}||0) || '?'), " 1/min\n",
"Heartrate avg:   ", (int($mim->{hr_avg}||0) || '?'), " 1/min\n",
"Heartrate max:   ", (int($mim->{hr_max}||0) || '?'), " 1/min at ",
	fmttime($mim->{hr_max_time}), "\n",

"Cadence avg:     ", (int($mim->{cad_navg}||0) || '?'), " 1/s\n",
"Cadence max:     ", (int($mim->{cad_max}||0) || '?'), " 1/s at ",
	fmttime($mim->{cad_max_time}), "\n",

"start elevation: ", (int($mim->{ele_start}||0) ||'?'), " m\n",
"min elevation:   ", (int($mim->{ele_min}||0) ||'?'), " m\n",
"max elevation:   ", (int($mim->{ele_max}||0) ||'?'), " m at ",
	fmttime($mim->{ele_max_time}), "\n",
"total ascent:    ", (int($mim->{ascent}||0) ||'?'), " m\n",
"total descent:   ", (int($mim->{descent}||0) ||'?'), " m\n",

"total distance:  ", sprintf( '%.2f', ($mim->{dist}||0) / 1000), " km\n",

"max speed:       ", sprintf( '%.2f', ($mim->{spd_max}||0) * KMH ), " km/h at ",
	fmttime($mim->{spd_max_time}), "\n",
"avg speed:       ", sprintf( '%.2f', ($mim->{spd_avg}||0) * KMH ), " km/h\n",
"max accel:       ", sprintf( '%.2f', ($mim->{accel_max}||0) ), " m/s² at ",
	fmttime($mim->{accel_max_time}), "\n",

"total work:      ", sprintf( '%.2f', ($mim->{work}||0) / 1000 ), " kJ\n",
"avg Power:       ", sprintf( '%.2f', ($mim->{pwr_avg}||0) ), " W\n", # TODO
"max Power:       ", sprintf( '%.2f', ($mim->{pwr_max}||0) ), " W at ", # TODO
	fmttime($mim->{pwr_max_time}), "\n",
"metadata:\n";
		foreach my $k ( sort { $a cmp $b } keys %$mm ){
			defined $mm->{$k} or next;
			ref $mm->{$k} and next;
			printf " %-16s%s\n", $k.':', $mm->{$k};
		}

	}
}

print "\n";
exit 0;

sub fmtdur {
	my $s = shift;
	my $m = int($s / 60); $s %= 60;
	my $h = int($m / 60); $m %= 60;
	sprintf('%d:%02d:%02d', $h, $m, $s);
}

sub fmttime {
	my $t = shift;
	return '?' unless $t;
	my $date = DateTime->from_epoch(
		epoch		=> $t,
		time_zone	=> 'local',
	);
	$date->hms;
}
